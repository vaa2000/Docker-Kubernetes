import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from flask import Flask, render_template, request

app = Flask(__name__)



@app.route('/')
def man():
    return render_template('home.html')

def predict(arr):
    # -*- coding: utf-8 -*-
    """Heart Disease Prediction.ipynb
    Automatically generated by Colaboratory.
    Original file is located at
    https://colab.research.google.com/drive/1LKpXObjOtf_3AxdmNtR92i0um8qhmIRe
    Importing the Dependencies
    """


    """Data Collection and Processing"""

    # loading the csv data to a Pandas DataFrame
    heart_data = pd.read_csv('content/heart.csv')

    # print first 5 rows of the dataset
    heart_data.head()

    # print last 5 rows of the dataset
    heart_data.tail()

    # number of rows and columns in the dataset
    heart_data.shape

    # getting some info about the data
    heart_data.info()

    # checking for missing values
    heart_data.isnull().sum()

    # statistical measures about the data
    heart_data.describe()

    # checking the distribution of Target Variable
    heart_data['target'].value_counts()

    """1 --> Defective Heart
    0 --> Healthy Heart

    Splitting the Features and Target
    """

    X = heart_data.drop(columns='target', axis=1)
    Y = heart_data['target']

    print(X)
    print(Y)

    """Splitting the Data into Training data & Test Data"""

    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

    print(X.shape, X_train.shape, X_test.shape)

    """Model Training

    Logistic Regression
    """

    model = LogisticRegression()

    # training the LogisticRegression model with Training data
    model.fit(X_train, Y_train)

    """Model Evaluation

    Accuracy Score
    """

    # accuracy on training data
    X_train_prediction = model.predict(X_train)
    training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

    print('Accuracy on Training data : ', training_data_accuracy)

    # accuracy on test data
    X_test_prediction = model.predict(X_test)
    test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

    print('Accuracy on Test data : ', test_data_accuracy)

    """Building a Predictive System"""

    input_data = (62,0,0,140,268,0,0,160,0,3.6,0,2,2)

    # change the input data to a numpy array
    #input_data_as_numpy_array= arr

    # reshape the numpy array as we are predicting for only on instance
    input_data_reshaped = arr.reshape(1,-1)

    prediction = model.predict(input_data_reshaped)
    #print(prediction)

    if (prediction[0]== 0):
	    return 0
    else:
  	    return 1


@app.route('/predict', methods=['POST'])
def home():
    data1 = request.form['a']
    data2 = request.form['b']
    data3 = request.form['c']
    data4 = request.form['d']
    data5 = request.form['e']
    data6 = request.form['f']
    data7 = request.form['g']
    data8 = request.form['h']
    data9 = request.form['i']
    data10 = request.form['j']
    data11 = request.form['k']
    data12 = request.form['l']
    data13 = request.form['m']
    arr = np.array([[data1, data2, data3, data4, data5, data6, data7, data8, data9, data10, data11, data12, data13]])
    pred = predict(arr)
    return render_template('after.html', data=pred)


if __name__ == "__main__":
    app.run(debug=True)


